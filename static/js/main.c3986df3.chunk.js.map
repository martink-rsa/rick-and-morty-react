{"version":3,"sources":["images/external-link.svg","components/Error/index.js","components/Error/Error.jsx","components/Loading/index.js","components/Loading/Loading.jsx","components/Character/index.js","components/Character/Character.jsx","components/Pages/Pages.jsx","components/Pages/index.js","config.js","utils/utils.js","components/SearchBar/SearchBar.jsx","components/Characters/index.js","components/Characters/Characters.jsx","App.jsx","index.jsx"],"names":["module","exports","Error","Loading","className","Character","data","console","log","name","origin","species","location","status","image","gender","url","Card","CardImg","top","src","alt","CardBody","CardTitle","href","target","rel","IconELink","Table","borderless","scope","Pages","getPage","currentPage","maxPages","Pagination","aria-label","PaginationItem","disabled","PaginationLink","first","onClick","previous","index","max","pageArr","activePage","i","push","value","active","begin","Math","floor","range","end","getPageNumbers","map","pageItem","key","next","last","DEFAULT_URL","getUrl","pageIndex","SearchBar","searchQuery","setSearchQuery","Form","FormGroup","Input","type","id","placeholder","onChange","event","currentTarget","Characters","useState","setCurrentPage","setData","isLoading","setIsLoading","isError","setIsError","doFetch","a","fetch","res","json","dir","maxPage","info","pages","prevState","prev","useEffect","query","dataIn","results","filter","item","toLowerCase","includes","character","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c3986df3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/external-link.7f7e0249.svg\";","import Error from './Error';\n\nexport default Error;\n","import React from 'react';\n\nconst Error = () => <div>Error: Error loading data</div>;\n\nexport default Error;\n","import Loading from './Loading';\n\nexport default Loading;\n","import React from 'react';\nimport './Loading.css';\n\nconst Error = () => (\n  <div className=\"spinner-container\">\n    <div className=\"lds-dual-ring\" />\n  </div>\n);\n\nexport default Error;\n","import Character from './Character';\n\nexport default Character;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Character.css';\nimport { Card, CardImg, CardBody, CardTitle, Table } from 'reactstrap';\nimport IconELink from '../../images/external-link.svg';\n\nconst Character = ({ data }) => {\n  console.log(data);\n  const { name, origin, species, location, status, image, gender, url } = data;\n  return (\n    <div>\n      <Card>\n        <CardImg\n          top\n          src={image}\n          alt={name}\n          className=\"rounded-circle card-img\"\n        />\n        <CardBody>\n          <CardTitle>\n            <a href={url}>{name}</a>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n              <img src={IconELink} alt={name} className=\"icon\" />\n            </a>\n          </CardTitle>\n          <Table borderless>\n            <tbody>\n              <tr>\n                <th scope=\"row\">Status:</th>\n                <td>{status === 'unknown' ? 'Unknown' : status}</td>\n              </tr>\n              <tr>\n                <th scope=\"row\">Species:</th>\n                <td>{species}</td>\n              </tr>\n              <tr>\n                <th scope=\"row\">Gender:</th>\n                <td>{gender}</td>\n              </tr>\n              <tr>\n                <th scope=\"row\">Origin:</th>\n                <td>\n                  {origin.name === 'unknown' ? (\n                    'Unknown'\n                  ) : (\n                    <a\n                      href={origin.url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {origin.name}\n                    </a>\n                  )}\n                </td>\n              </tr>\n              <tr>\n                <th scope=\"row\">Location:</th>\n                <td>\n                  {location.name === 'unknown' ? (\n                    'Unknown'\n                  ) : (\n                    <a\n                      href={location.url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {location.name}\n                    </a>\n                  )}\n                </td>\n              </tr>\n            </tbody>\n          </Table>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nCharacter.propTypes = {\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    origin: PropTypes.shape({\n      name: PropTypes.string,\n      url: PropTypes.string,\n    }),\n    species: PropTypes.string,\n    location: PropTypes.shape({\n      name: PropTypes.string,\n      url: PropTypes.string,\n    }),\n    status: PropTypes.string,\n    image: PropTypes.string,\n    gender: PropTypes.string,\n    url: PropTypes.string,\n  }).isRequired,\n};\n\nexport default Character;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Pages.css';\nimport { Pagination, PaginationItem, PaginationLink } from 'reactstrap';\n\nfunction Pages({ getPage, currentPage, maxPages }) {\n  function getPageNumbers(index, max) {\n    const pageArr = [];\n    const range = 5;\n    let activePage = false;\n    if (index < 3) {\n      for (let i = 0; i < range; i += 1) {\n        activePage = false;\n        if (i === index) {\n          activePage = true;\n        }\n        pageArr.push({ value: i + 1, active: activePage });\n      }\n    } else if (index > max - 3) {\n      for (let i = max - range; i < max; i += 1) {\n        activePage = false;\n        if (i === index) {\n          activePage = true;\n        }\n        pageArr.push({ value: i + 1, active: activePage });\n      }\n    } else {\n      // Range of numbers with page index in the middle of the range\n      // Dynamic solution used so the range of numbers can always be increased\n      // Stick to odd numbers for a range so that the current page can be in the middle\n      const begin = index - Math.floor(range / 2); // Half of range below index\n      const end = index + Math.floor(range / 2); // Half of range above index\n      for (let i = begin; i <= end; i += 1) {\n        activePage = false;\n        if (i === index) {\n          activePage = true;\n        }\n        pageArr.push({ value: i + 1, active: activePage });\n      }\n    }\n    return pageArr;\n  }\n\n  /* Multiple conditional renders about to take place according to\n        where the pagination index is */\n  return (\n    <div className=\"pages-container\">\n      <Pagination aria-label=\"Pagination\">\n        {currentPage === 1 ? (\n          <PaginationItem disabled>\n            <PaginationLink first />\n          </PaginationItem>\n        ) : (\n          <PaginationItem>\n            <PaginationLink first onClick={() => getPage('first')} />\n          </PaginationItem>\n        )}\n        {currentPage === 1 ? (\n          <PaginationItem disabled>\n            <PaginationLink previous />\n          </PaginationItem>\n        ) : (\n          <PaginationItem>\n            <PaginationLink previous onClick={() => getPage('prev')} />\n          </PaginationItem>\n        )}\n        {getPageNumbers(currentPage - 1, maxPages).map((pageItem) => {\n          return pageItem.active ? (\n            <PaginationItem key={`pagination-page-${pageItem.value}`} active>\n              <PaginationLink>{pageItem.value}</PaginationLink>\n            </PaginationItem>\n          ) : (\n            <PaginationItem key={`pagination-page-${pageItem.value}`}>\n              <PaginationLink onClick={() => getPage(pageItem.value)}>\n                {pageItem.value}\n              </PaginationLink>\n            </PaginationItem>\n          );\n        })}\n        {currentPage === 30 ? (\n          <PaginationItem disabled>\n            <PaginationLink next />\n          </PaginationItem>\n        ) : (\n          <PaginationItem>\n            <PaginationLink next onClick={() => getPage('next')} />\n          </PaginationItem>\n        )}\n        {currentPage === 30 ? (\n          <PaginationItem disabled>\n            <PaginationLink last />\n          </PaginationItem>\n        ) : (\n          <PaginationItem>\n            <PaginationLink last onClick={() => getPage('last')} />\n          </PaginationItem>\n        )}\n      </Pagination>\n    </div>\n  );\n}\n\nPages.propTypes = {\n  getPage: PropTypes.func.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  maxPages: PropTypes.number.isRequired,\n};\n\nexport default Pages;\n","import Pages from './Pages';\n\nexport default Pages;\n","export const DEFAULT_URL = 'https://rickandmortyapi.com/api/character/';\n","import { DEFAULT_URL } from '../config';\n\nexport const getUrl = (pageIndex) => `${DEFAULT_URL}/?page=${pageIndex}`;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport './SearchBar.css';\nimport { Form, FormGroup, Input } from 'reactstrap';\n\nfunction SearchBar({ searchQuery, setSearchQuery }) {\n  return (\n    <div className=\"form-container\">\n      <Form>\n        <FormGroup>\n          <Input\n            type=\"text\"\n            name=\"search\"\n            id=\"search\"\n            value={searchQuery}\n            placeholder=\"Search\"\n            onChange={(event) => setSearchQuery(event.currentTarget.value)}\n          />\n        </FormGroup>\n        {/* <Button>Submit</Button> */}\n      </Form>\n    </div>\n  );\n}\n\nSearchBar.propTypes = {\n  searchQuery: propTypes.string.isRequired,\n  setSearchQuery: propTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import Characters from './Characters';\n\nexport default Characters;\n","import React, { useEffect, useState } from 'react';\nimport './Characters.css';\nimport Error from '../Error';\nimport Loading from '../Loading';\nimport Character from '../Character';\nimport Pages from '../Pages';\nimport { getUrl } from '../../utils/utils';\nimport { DEFAULT_URL } from '../../config';\nimport SearchBar from '../SearchBar/SearchBar';\n\nconst Characters = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  async function doFetch(url) {\n    try {\n      setIsError(false);\n      setIsLoading(true);\n      const res = await fetch(url);\n      const json = await res.json();\n      setData(json);\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n      setIsError(true);\n    }\n  }\n\n  function getPage(dir) {\n    const maxPage = data.info.pages;\n    switch (dir) {\n      case 'next':\n        setCurrentPage((prevState) => prevState + 1);\n        doFetch(data.info.next);\n        break;\n      case 'prev':\n        setCurrentPage((prevState) => prevState - 1);\n        doFetch(data.info.prev);\n        break;\n      case 'first':\n        setCurrentPage(1);\n        doFetch(getUrl(1));\n        break;\n      case 'last':\n        setCurrentPage(maxPage);\n        doFetch(getUrl(maxPage));\n        break;\n      default:\n        if (typeof dir === 'number') {\n          setCurrentPage(dir);\n          doFetch(getUrl(dir));\n        } else {\n          // eslint-disable-next-line no-console\n          console.log('Error handling pagination');\n        }\n    }\n  }\n\n  useEffect(() => {\n    doFetch(DEFAULT_URL);\n  }, []);\n\n  const filterResults = (query, dataIn) =>\n    dataIn.filter((item) =>\n      item.name.toLowerCase().includes(query.toLowerCase()),\n    );\n\n  return (\n    <div>\n      {isLoading ? <Loading /> : null}\n      {isError ? <Error /> : null}\n      {data ? (\n        <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\n      ) : null}\n      {data ? (\n        <Pages\n          next={data.info.next}\n          getPage={getPage}\n          currentPage={currentPage}\n          maxPages={data.info.pages}\n        />\n      ) : null}\n\n      <div className=\"characters-container\">\n        {!isLoading && !isError && data\n          ? filterResults(searchQuery, data.results).map((character) => (\n              // eslint-disable-next-line react/jsx-indent\n              <Character\n                key={`character-${character.id}-${character.name}`}\n                data={character}\n              />\n            ))\n          : null}\n      </div>\n      {data ? (\n        <Pages\n          next={data.info.next}\n          getPage={getPage}\n          currentPage={currentPage}\n          maxPages={data.info.pages}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport default Characters;\n","import React from 'react';\nimport './App.css';\nimport Characters from './components/Characters';\n\nconst App = () => (\n  <div className=\"App\">\n    <h1>Characters</h1>\n    <Characters />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}